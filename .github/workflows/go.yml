name: Build and Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Init Go modules
        run: |
          cd src/
          go mod init my-ssh-tools
          go mod tidy
          cd ../
      
      - name: Create bin directory
        run: mkdir bin
      
      - name: Setup fpm
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install --no-document fpm

      - name: Build binaries for Linux
        if: matrix.os == 'ubuntu-latest'
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          go build -o bin/ssh-menu src/ssh-menu.go
          go build -o bin/ssh-add-host src/ssh-add-host.go
      
      - name: Build binaries for MacOS Intel
        if: matrix.os == 'macos-latest'
        env:
          GOOS: darwin
          GOARCH: amd64
        run: |
          go build -o bin/ssh-menu-amd64 src/ssh-menu.go
          go build -o bin/ssh-add-host-amd64 src/ssh-add-host.go
      
      - name: Build binaries for MacOS Apple Silicon
        if: matrix.os == 'macos-latest'
        env:
          GOOS: darwin
          GOARCH: arm64
        run: |
          go build -o bin/ssh-menu-arm64 src/ssh-menu.go
          go build -o bin/ssh-add-host-arm64 src/ssh-add-host.go
      
      - name: Create dist directory
        run: mkdir dist

      - name: Setup fpm config
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd dist/
          cat <<EOF > .fpm
          -s dir
          --name my-ssh-tools
          --version ${GITHUB_REF##*/v}
          --architecture amd64
          --depends bash --depends fzf
          --description "Lightweight CLI tool that offers an interactive way of adding hosts to SSH config file and then connecting to them with easy-to-use SSH menu."
          --url "https://github.com/noadevereux/my-ssh-tools"
          --maintainer "Dmitriy Medvedev <medvedevdmitry21@gmail.com>"

          ssh-menu=/usr/local/bin/ssh-menu ssh-add-host=/usr/local/bin/ssh-add-host
          EOF
          cd ../

      - name: Build packages for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cp bin/ssh-menu bin/ssh-add-host dist/
          cd dist/
          fpm -t deb -p my-ssh-tools-${GITHUB_REF##*/}-amd64.deb
          fpm -t rpm -p my-ssh-tools-${GITHUB_REF##*/}-amd64.rpm
          # fpm -t pacman -p my-ssh-tools-${GITHUB_REF##*/}-amd64.pkg.tar.zst
          cd ../
      
      - name: Build packages for MacOS
        if: matrix.os == 'macos-latest'
        run: |
          mkdir dist/my-ssh-tools
          cp bin/ssh-menu-amd64 bin/ssh-add-host-amd64 dist/my-ssh-tools/
          cd dist/
          hdiutil create -volname my-ssh-tools \
            -srcfolder my-ssh-tools \
            -ov -format UDZO my-ssh-tools-${GITHUB_REF##*/}-amd64.dmg
          cd ../
          rm -rf dist/my-ssh-tools
          mkdir dist/my-ssh-tools
          cp bin/ssh-menu-arm64 bin/ssh-add-host-arm64 dist/my-ssh-tools/
          cd dist/
          hdiutil create -volname my-ssh-tools \
            -srcfolder my-ssh-tools \
            -ov -format UDZO my-ssh-tools-${GITHUB_REF##*/}-arm64.dmg
          cd ../
          rm -rf dist/my-ssh-tools

      - name: Upload artifacts for Linux
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: linux-packages
          path: |
            dist/*.deb
            dist/*.rpm
            dist/*.pkg.tar.zst

      - name: Upload artifacts for MacOS
        uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-latest'
        with:
          name: macos-packages
          path: |
            dist/*.dmg

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v5
        with:
          name: linux-packages
          path: ./
      
      - name: Download MacOS artifacts
        uses: actions/download-artifact@v5
        with:
          name: macos-packages
          path: ./

      - name: List files
        run: ls -la

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            *.deb
            *.rpm
            *.dmg
